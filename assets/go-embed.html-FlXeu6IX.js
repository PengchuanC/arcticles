const e=JSON.parse('{"key":"v-36d39a60","path":"/posts/go-embed.html","title":"Go 1.16 新特性embed在gin中使用","lang":"zh-CN","frontmatter":{"title":"Go 1.16 新特性embed在gin中使用","date":"2021-07-02T07:14:15.000Z","icon":"golang","tag":["golang","embed","模板继承","gin"],"description":"在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静态资源文件(css、js)始终按照开发时的目录结构放在一起，部署起来很麻烦。 embed是在Go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。 1.使用gin框架构建一个简单的静态资源服务器 使用gin构建一个web服务非常简单，使用embed加入静态资源也非常简单，代码如下：","head":[["meta",{"property":"og:url","content":"https://arc.cpolar.cn/posts/go-embed.html"}],["meta",{"property":"og:site_name","content":"Maverick"}],["meta",{"property":"og:title","content":"Go 1.16 新特性embed在gin中使用"}],["meta",{"property":"og:description","content":"在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静态资源文件(css、js)始终按照开发时的目录结构放在一起，部署起来很麻烦。 embed是在Go 1.16中新加包。它通过//go:embed指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。 1.使用gin框架构建一个简单的静态资源服务器 使用gin构建一个web服务非常简单，使用embed加入静态资源也非常简单，代码如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T11:07:09.000Z"}],["meta",{"property":"article:author","content":"Chuanchao.peng"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"embed"}],["meta",{"property":"article:tag","content":"模板继承"}],["meta",{"property":"article:tag","content":"gin"}],["meta",{"property":"article:published_time","content":"2021-07-02T07:14:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-02T11:07:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go 1.16 新特性embed在gin中使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-02T07:14:15.000Z\\",\\"dateModified\\":\\"2024-01-02T11:07:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chuanchao.peng\\",\\"url\\":\\"https://github.com/PengchuanC\\"}]}"]]},"headers":[{"level":3,"title":"1.使用gin框架构建一个简单的静态资源服务器","slug":"_1-使用gin框架构建一个简单的静态资源服务器","link":"#_1-使用gin框架构建一个简单的静态资源服务器","children":[]},{"level":3,"title":"2.在模板语言中使用静态资源","slug":"_2-在模板语言中使用静态资源","link":"#_2-在模板语言中使用静态资源","children":[]},{"level":3,"title":"3.多模板渲染","slug":"_3-多模板渲染","link":"#_3-多模板渲染","children":[]}],"git":{"createdTime":1704193629000,"updatedTime":1704193629000,"contributors":[{"name":"PengchuanC","email":"gameboynes@gmail.com","commits":1}]},"readingTime":{"minutes":3.4,"words":1019},"filePathRelative":"posts/go-embed.md","localizedDate":"2021年7月2日","excerpt":"<blockquote>\\n<p>在golang1.16加入之前，编译出来的二进制文件默认是不包括非代码文件的，那么开发一个web网站，则需要将html模板文件、配置文件和静态资源文件(css、js)始终按照开发时的目录结构放在一起，部署起来很麻烦。</p>\\n</blockquote>\\n<p>embed是在Go 1.16中新加包。它通过<code>//go:embed</code>指令，可以在编译阶段将静态资源文件打包进编译好的程序中，并提供访问这些文件的能力。</p>\\n<h3> 1.使用gin框架构建一个简单的静态资源服务器</h3>\\n<p>使用gin构建一个web服务非常简单，使用embed加入静态资源也非常简单，代码如下：</p>","autoDesc":true}');export{e as data};
