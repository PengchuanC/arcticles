import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-8k_0S3qm.js";const t={},p=e(`<p>在前后端分离的web项目中，后端一般采用Restful Api，这种模式的后端是无状态的，</p><p>不便再使用Session这种传统的认证方式，一般采用<strong>JWT</strong>。</p><p>基于jwt的鉴权机制也是无状态的，因此不需要在服务端去保留用户的认证信息或者会话信息，jwt是存储在客户端的，服务器端不需要存储jwt的，客户端每次发送请求时会携带该token，然后到服务器端会验证token是否正确，是否过期了，来验证token的有效性。</p><p>再Django中，使用restframework便可以很方便的使用jwt进行认证了，我们也可以通过标准库<code>jwt</code>来简单实现jwt加解密过程。</p><h2 id="_1-jwt加密" tabindex="-1"><a class="header-anchor" href="#_1-jwt加密" aria-hidden="true">#</a> 1.JWT加密</h2><p>jwt加密一般采用<code>HS256</code>的加密方式，为了保证jwt的安全，需要设置一个仅提供者可知的<code>secret key</code>，然后再对用户信息进行打包，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jwt
<span class="token keyword">import</span> datetime

<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> JSONWebSignatureSerializer


SECRET_KEY <span class="token operator">=</span> <span class="token string">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>

<span class="token comment"># token超时时间</span>
expire_at <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Asin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;expireAt&#39;</span><span class="token punctuation">:</span> expire_at<span class="token punctuation">}</span>

token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>payload<span class="token punctuation">,</span> key<span class="token operator">=</span>SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token comment">#b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-jwt解密" tabindex="-1"><a class="header-anchor" href="#_2-jwt解密" aria-hidden="true">#</a> 2.JWT解密</h2><p>解密的关键就在于<code>secret key</code>和加密方式，知道这两条信息后，解密过程就很简单了，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> jwt

token <span class="token operator">=</span> <span class="token string">b&#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IkFzaW4iLCJleHBpcmVBdCI6MTYwODUyMjI1Mi44MTU5NzV9.psXYOLOgzo1mzAHzDCk2hcocMaq_D84yOoXPMhk3W8U&#39;</span>

SECRET_KEY <span class="token operator">=</span> <span class="token string">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>

info <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span> key<span class="token operator">=</span>SECRET_KEY<span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
<span class="token comment"># {&#39;username&#39;: &#39;Asin&#39;, &#39;expireAt&#39;: 1608522252.815975}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用itsdangerous包" tabindex="-1"><a class="header-anchor" href="#_3-使用itsdangerous包" aria-hidden="true">#</a> 3.使用<code>itsdangerous</code>包</h3><p><code>itesdangerous</code>是flask中推荐使用的签名工具，使用方式也相当简单。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> TimedJSONWebSignatureSerializer


SECRET_KEY <span class="token operator">=</span> <span class="token string">&#39;iencj58^&amp;/.+_@#%$jnckn&#39;</span>


serializer <span class="token operator">=</span> TimedJSONWebSignatureSerializer<span class="token punctuation">(</span>secret_key<span class="token operator">=</span>SECRET_KEY<span class="token punctuation">,</span> algorithm_name<span class="token operator">=</span><span class="token string">&#39;HS256&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 设置超时时间为15分组</span>
serializer<span class="token punctuation">.</span>DEFAULT_EXPIRES_IN <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">15</span>
token <span class="token operator">=</span> serializer<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Asin&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>

info <span class="token operator">=</span> serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>token<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-在项目中使用" tabindex="-1"><a class="header-anchor" href="#_4-在项目中使用" aria-hidden="true">#</a> 4.在项目中使用</h2><p>在项目中使用jwt时，一般还需要包含令牌的签发者及签发日期等信息，用于加强安全性和token超时后的刷新机制，因此认证后返回的除了token外还应该包含一条用于刷新的token，避免token频繁超时。</p>`,15),o=[p];function i(c,l){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","python-jwt.html.vue"]]);export{u as default};
