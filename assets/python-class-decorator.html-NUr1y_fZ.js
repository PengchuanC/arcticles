const t=JSON.parse('{"key":"v-8175de6c","path":"/python/python-class-decorator.html","title":"Python使用装饰器来实现重试","lang":"zh-CN","frontmatter":{"title":"Python使用装饰器来实现重试","date":"2020-12-15T02:09:06.000Z","tag":["python","retry","装饰器类"],"description":"在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。 主要使用了python中class的魔术方法__call__和递归函数。 1.Python中的__call__方法 __call__函数的作用是将一个类变为callable对象，即可用用()来调用一个已经实例化的对象，这也是将class作为装饰器的关键。","head":[["meta",{"property":"og:url","content":"https://arc.cpolar.cn/python/python-class-decorator.html"}],["meta",{"property":"og:site_name","content":"Maverick"}],["meta",{"property":"og:title","content":"Python使用装饰器来实现重试"}],["meta",{"property":"og:description","content":"在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。 主要使用了python中class的魔术方法__call__和递归函数。 1.Python中的__call__方法 __call__函数的作用是将一个类变为callable对象，即可用用()来调用一个已经实例化的对象，这也是将class作为装饰器的关键。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T11:07:09.000Z"}],["meta",{"property":"article:author","content":"Chuanchao.peng"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"retry"}],["meta",{"property":"article:tag","content":"装饰器类"}],["meta",{"property":"article:published_time","content":"2020-12-15T02:09:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-02T11:07:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python使用装饰器来实现重试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-15T02:09:06.000Z\\",\\"dateModified\\":\\"2024-01-02T11:07:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chuanchao.peng\\",\\"url\\":\\"https://github.com/PengchuanC\\"}]}"]]},"headers":[{"level":2,"title":"1.Python中的__call__方法","slug":"_1-python中的-call-方法","link":"#_1-python中的-call-方法","children":[]},{"level":2,"title":"2.实现装饰器","slug":"_2-实现装饰器","link":"#_2-实现装饰器","children":[]},{"level":2,"title":"3.模拟网络访问中的错误","slug":"_3-模拟网络访问中的错误","link":"#_3-模拟网络访问中的错误","children":[]},{"level":2,"title":"4.关于函数签名","slug":"_4-关于函数签名","link":"#_4-关于函数签名","children":[]},{"level":2,"title":"5.完整代码","slug":"_5-完整代码","link":"#_5-完整代码","children":[]}],"git":{"createdTime":1704193629000,"updatedTime":1704193629000,"contributors":[{"name":"PengchuanC","email":"gameboynes@gmail.com","commits":1}]},"readingTime":{"minutes":3.48,"words":1043},"filePathRelative":"python/python-class-decorator.md","localizedDate":"2020年12月15日","excerpt":"<p>在之前使用grpc的项目中偶尔会遇到连接时间过久，tcp连接断掉的情况，于是尝试写一个装饰器来实现自动重连3次，即最大尝试4次连接。</p>\\n<p>主要使用了python中class的魔术方法<code>__call__</code>和递归函数。</p>\\n<h2> 1.Python中的<code>__call__</code>方法</h2>\\n<p><code>__call__</code>函数的作用是将一个类变为<code>callable</code>对象，即可用用<code>()</code>来调用一个已经实例化的对象，这也是将<code>class</code>作为装饰器的关键。</p>","autoDesc":true}');export{t as data};
