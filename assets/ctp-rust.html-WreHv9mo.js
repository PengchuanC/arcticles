const t=JSON.parse('{"key":"v-73bda472","path":"/posts/ctp-rust.html","title":"使用Rust实现CTP柜台系统接口","lang":"zh-CN","frontmatter":{"title":"使用Rust实现CTP柜台系统接口","date":"2024-03-22T07:33:00.000Z","tag":["rust","c++","ctp","期货"],"description":"CTP 官方介绍 上期技术综合交易平台（Comprehensive Transaction Platform，简称CTP）系列产品为期货经纪公司提供国内期货与证券及衍生品的交易、风控、结算等业务的解决方案。 CTP接入 CTP的接入需要使用官方提供的API接口，基于C++开发，第三方实现了基于CPython的接口，本文试图实现基于C语言FFI的接口，来探索Rust语言的接入方式。 原理 Rust和C语言能够互相调用的关键在于它们在底层系统接口、内存模型、函数调用约定等方面的高度兼容性。Rust的FFI机制则提供了一个友好的编程接口,使得开发人员可以无缝地在两种语言之间切换。 概括来讲，实现以下特性就可以保证Rust和C语言的代码安全调用：","head":[["meta",{"property":"og:url","content":"https://arc.cpolar.cn/posts/ctp-rust.html"}],["meta",{"property":"og:site_name","content":"Maverick"}],["meta",{"property":"og:title","content":"使用Rust实现CTP柜台系统接口"}],["meta",{"property":"og:description","content":"CTP 官方介绍 上期技术综合交易平台（Comprehensive Transaction Platform，简称CTP）系列产品为期货经纪公司提供国内期货与证券及衍生品的交易、风控、结算等业务的解决方案。 CTP接入 CTP的接入需要使用官方提供的API接口，基于C++开发，第三方实现了基于CPython的接口，本文试图实现基于C语言FFI的接口，来探索Rust语言的接入方式。 原理 Rust和C语言能够互相调用的关键在于它们在底层系统接口、内存模型、函数调用约定等方面的高度兼容性。Rust的FFI机制则提供了一个友好的编程接口,使得开发人员可以无缝地在两种语言之间切换。 概括来讲，实现以下特性就可以保证Rust和C语言的代码安全调用："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T08:45:34.000Z"}],["meta",{"property":"article:author","content":"Chuanchao.peng"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"c++"}],["meta",{"property":"article:tag","content":"ctp"}],["meta",{"property":"article:tag","content":"期货"}],["meta",{"property":"article:published_time","content":"2024-03-22T07:33:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T08:45:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Rust实现CTP柜台系统接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-22T07:33:00.000Z\\",\\"dateModified\\":\\"2024-03-22T08:45:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chuanchao.peng\\",\\"url\\":\\"https://github.com/PengchuanC\\"}]}"]]},"headers":[{"level":2,"title":"官方介绍","slug":"官方介绍","link":"#官方介绍","children":[]},{"level":2,"title":"CTP接入","slug":"ctp接入","link":"#ctp接入","children":[]},{"level":2,"title":"用C封装CTP","slug":"用c封装ctp","link":"#用c封装ctp","children":[{"level":3,"title":"实现API","slug":"实现api","link":"#实现api","children":[]},{"level":3,"title":"SPI实现","slug":"spi实现","link":"#spi实现","children":[]}]},{"level":2,"title":"Rust与C交互","slug":"rust与c交互","link":"#rust与c交互","children":[{"level":3,"title":"类的封装","slug":"类的封装","link":"#类的封装","children":[]},{"level":3,"title":"回调函数的封装","slug":"回调函数的封装","link":"#回调函数的封装","children":[]},{"level":3,"title":"返回数据的内存对齐","slug":"返回数据的内存对齐","link":"#返回数据的内存对齐","children":[]},{"level":3,"title":"如何在c++中访问rust中的不安全数据","slug":"如何在c-中访问rust中的不安全数据","link":"#如何在c-中访问rust中的不安全数据","children":[]}]}],"git":{"createdTime":1711097134000,"updatedTime":1711097134000,"contributors":[{"name":"PengchuanC","email":"gameboynes@gmail.com","commits":1}]},"readingTime":{"minutes":7.88,"words":2363},"filePathRelative":"posts/ctp-rust.md","localizedDate":"2024年3月22日","excerpt":"<h1> CTP</h1>\\n<h2> 官方介绍</h2>\\n<p>上期技术综合交易平台（Comprehensive Transaction Platform，简称CTP）系列产品为期货经纪公司提供国内期货与证券及衍生品的交易、风控、结算等业务的解决方案。</p>\\n<h2> CTP接入</h2>\\n<p>CTP的接入需要使用官方提供的API接口，基于C++开发，第三方实现了基于CPython的接口，本文试图实现基于C语言FFI的接口，来探索Rust语言的接入方式。</p>\\n<h1> 原理</h1>\\n<p>Rust和C语言能够互相调用的关键在于它们在底层系统接口、内存模型、函数调用约定等方面的高度兼容性。Rust的FFI机制则提供了一个友好的编程接口,使得开发人员可以无缝地在两种语言之间切换。<br>\\n概括来讲，实现以下特性就可以保证Rust和C语言的代码安全调用：</p>","autoDesc":true}');export{t as data};
