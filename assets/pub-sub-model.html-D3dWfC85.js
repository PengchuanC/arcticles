const e=JSON.parse('{"key":"v-0ad43d82","path":"/posts/pub-sub-model.html","title":"发布/订阅模式","lang":"zh-CN","frontmatter":{"title":"发布/订阅模式","date":"2020-12-04T10:06:42.000Z","icon":"golang","tag":["golang","设计模式","发布订阅模式"],"description":"发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据 也可以考虑使用回调函数来处理publish的内容 定义Publisher 首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递 // Publisher 发布者 // 管理订阅者 // 发布内容 type Publisher struct { \\tsync.RWMutex \\tSubscribers map[string]*Subscriber \\twaitGroup sync.WaitGroup } func NewPublisher() *Publisher { \\treturn &amp;Publisher{ \\t\\tSubscribers: make(map[string]*Subscriber), \\t} }","head":[["meta",{"property":"og:url","content":"https://arc.cpolar.cn/posts/pub-sub-model.html"}],["meta",{"property":"og:site_name","content":"Maverick"}],["meta",{"property":"og:title","content":"发布/订阅模式"}],["meta",{"property":"og:description","content":"发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据 也可以考虑使用回调函数来处理publish的内容 定义Publisher 首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递 // Publisher 发布者 // 管理订阅者 // 发布内容 type Publisher struct { \\tsync.RWMutex \\tSubscribers map[string]*Subscriber \\twaitGroup sync.WaitGroup } func NewPublisher() *Publisher { \\treturn &amp;Publisher{ \\t\\tSubscribers: make(map[string]*Subscriber), \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T11:07:09.000Z"}],["meta",{"property":"article:author","content":"Chuanchao.peng"}],["meta",{"property":"article:tag","content":"golang"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"发布订阅模式"}],["meta",{"property":"article:published_time","content":"2020-12-04T10:06:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-02T11:07:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"发布/订阅模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-12-04T10:06:42.000Z\\",\\"dateModified\\":\\"2024-01-02T11:07:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Chuanchao.peng\\",\\"url\\":\\"https://github.com/PengchuanC\\"}]}"]]},"headers":[{"level":2,"title":"定义Publisher","slug":"定义publisher","link":"#定义publisher","children":[]},{"level":2,"title":"定义Subscriber","slug":"定义subscriber","link":"#定义subscriber","children":[]}],"git":{"createdTime":1704193629000,"updatedTime":1704193629000,"contributors":[{"name":"PengchuanC","email":"gameboynes@gmail.com","commits":1}]},"readingTime":{"minutes":2.52,"words":755},"filePathRelative":"posts/pub-sub-model.md","localizedDate":"2020年12月4日","excerpt":"<p>发布订阅模式比较常用，近期使用grpc也涉及到连接管理简单记录一下发布订阅模式的实现，主要使用chan来传输数据</p>\\n<p>也可以考虑使用回调函数来处理publish的内容</p>\\n<h2> 定义Publisher</h2>\\n<p>首先定义一个Publish的struct，主要包含Subscribers属性来管理订阅者，订阅者必须使用指针来保证数据传递</p>\\n<div class=\\"language-golang line-numbers-mode\\" data-ext=\\"golang\\"><pre class=\\"language-golang\\"><code>// Publisher 发布者\\n// 管理订阅者\\n// 发布内容\\ntype Publisher struct {\\n\\tsync.RWMutex\\n\\tSubscribers map[string]*Subscriber\\n\\twaitGroup sync.WaitGroup\\n}\\n\\nfunc NewPublisher() *Publisher {\\n\\treturn &amp;Publisher{\\n\\t\\tSubscribers: make(map[string]*Subscriber),\\n\\t}\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
